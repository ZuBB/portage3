#!/usr/bin/env ruby
#
# Here should go some comment
#
# Initial Author: Vasyl Zuzyak, 01/04/12
# Latest Modification: Vasyl Zuzyak, 01/06/12
#
$:.push File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib'))
require 'optparse'
require 'rubygems'
require 'sqlite3'
require 'tools'

# hash with default options
options = {
    :sql_src_home => '../sql',
    :sql_src => 'portage-sqlite.sql',
    :db_filename => File.join(
        STORAGE[:root],
        STORAGE[:home_folder],
        "test-#{get_timestamp()}.sqlite"
    ),
    :verbose => false
}

OptionParser.new do |opts|
    # help header
    opts.banner = " Usage: create_db [options]\n"
    opts.separator " Creates empty database file for Gentoo portage\n"

    # parsing 'db_filename' option if present
    opts.on("-f", "--database-file STRING", "Path to new database file") do |value|
        if File.exists?(value)
            puts "ERROR: file '#{value}' already exists!"
            exit(1)
        end

        base_dir = File.dirname(value)

        if !File.exists?(base_dir)
            puts "ERROR: directory '#{base_dir}' does not exist!"
            exit(1)
        end

        if !File.writable?(base_dir)
            puts "ERROR: directory '#{base_dir}' is not writable!"
            exit(1)
        end

        options[:db_filename] = value
    end

    # parsing 'verbose' option if present
    opts.on("-v", "--verbose", "Versbose mode") do |value|
        options[:verbose] = true
    end

    # parsing 'help' option if present
    opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
    end
end.parse!

sql = IO.read(File.join(
    File.dirname(__FILE__),
    options[:sql_src_home],
    options[:sql_src]
))

# print sql if verbose is set
if options[:verbose]
    puts '='*30
    puts sql
    puts '='*30
end

begin
    db = SQLite3::Database.new(options[:db_filename])
    db.execute_batch(sql)
    puts 'Everything is OK. Database was created at:' if options[:verbose]
    puts options[:db_filename]
    error_code = 0
rescue Exception => msg
    File.delete(options[:db_filename])
    puts msg if options[:verbose]
    error_code = 1
ensure
    db.close() if db.closed? == false
end

exit(error_code)
