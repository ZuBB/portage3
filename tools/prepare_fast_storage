#!/usr/bin/env ruby
#
# here should go some comment
#
$:.push File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib'))
require 'fileutils'
require 'optparse'
require 'tools'
require 'time'

options = {
    :download_snapshot => false,
    :download_url => 'http://de-mirror.org/gentoo/snapshots/portage-latest.tar.bz2',
    :recreate_tree => false,
    :snapshots_home => '../../snapshots/',
    :snapshot_name => 'portage-latest.tar.bz2',
    :storage => {}
}

# lets merge stuff from tools lib
options[:storage].merge!(STORAGE)

OptionParser.new do |opts|
    # help header
    opts.banner = " Usage: purge_s3_data [options]\n"
    opts.separator " A script that purges outdated data from s3 bucket\n"

    opts.on("-d", "--download-snapshot", "Redownload latest snapshot") do |value|
        options[:download_snapshot] = true
        options[:recreate_tree] = true
    end

    opts.on("-r", "--recreate-tree", "Recreate portage tree") do |value|
        options[:recreate_tree] = true
    end

    opts.on("-u", "--url STRING", "URL where snapshot is located") do |value|
        options[:download_url] = value
    end

    # parsing 'quite' option if present
    opts.on("-q", "--quiet", "Quiet mode") do |value|
        options[:quiet] = true
    end

    # parsing 'help' option if present
    opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
    end
end.parse!

print "Checking if '#{options[:storage][:root]}' is a symlink on target system.. "
if File.symlink?(options[:storage][:root])
    options[:storage][:root] = File.readlink(options[:storage][:root])
    puts "YES"
else
    puts "NO"
end

print "Checking if '#{options[:storage][:root]}' path is  present on target system.. "
if File.exist?(options[:storage][:root])
    puts "OK"
else
    puts "ERROR: '#{options[:storage][:root]}' location can not be found on target system"
    exit(1)
end

print "Checking if '#{options[:storage][:root]}' is a directory on target system.. "
if File.directory?(options[:storage][:root])
    puts "OK"
else
    puts "ERROR: '#{options[:storage][:root]}' is not a directory on target system"
    exit(1)
end

print "Checking if '#{options[:storage][:root]}' is writable on target system.. "
if File.writable?(options[:storage][:root])
    puts "OK"
else
    puts "ERROR: '#{options[:storage][:root]}' is not writable on target system"
    exit(1)
end

print "Checking if '#{options[:storage][:root]}' has enough free space on target system.. "
space_available = `df -kP #{options[:storage][:root]}`.split("\n")[1].split(" ")[3].to_i
if space_available > options[:storage][:required_space] * 1024
    puts "OK"
else
    puts "ERROR: '#{options[:storage][:root]}' does not have enough free space"
    exit(1)
end

if options[:download_snapshot]
    puts "Starting download latest portage snapshot.."
    file_location = File.join(
        options[:snapshots_home],
        options[:snapshot_name]
    )

    if file_location.index('latest') != nil
        file_location.gsub!("latest", Time.now.strftime("%Y%m%d-%H%M%S"))
    end

    `wget -O #{file_location} #{options[:download_url]}`
end

home_path = File.join(options[:storage][:root], options[:storage][:home_folder])
full_path = File.join(home_path, options[:storage][:portage_home])

if options[:recreate_tree] || !File.exist?(home_path) || !File.exist?(full_path)
    FileUtils.rm_r(full_path) if File.exist?(full_path)
    Dir.mkdir(home_path) if !File.exist?(home_path)
    print "Starting to exctact portage snapshots.. "
    `tar xjf #{file_location} -C #{home_path}`
    puts "Done"
end

